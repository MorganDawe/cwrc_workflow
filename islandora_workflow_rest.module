<?php
/**
 * @file
 * The main module file for the Islanora workflow rest interface.
 */

// Default constant.
define('ISLANDORA_WORKFLOW_REST_SOLR_DEFAULT_FIELD', 'workflow_userID_ms');

/**
 * Implements hook_menu().
 */
function islandora_workflow_rest_menu() {
  return array(
    // Workflow datastream form entry point tab.
    'islandora/object/%islandora_object/workflow' => array(
      'title' => 'Workflow',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('islandora_workflow_rest_entry_form', 2),
      'type' => MENU_LOCAL_TASK,
      'access arguments' => array(2),
      'access callback' => TRUE,
      'file' => 'includes/workflow.form.inc',
    ),
    // Administer/add new workflow stamps.
    'admin/islandora/islandora_workflow_rest' => array(
      'title' => 'Workflow Rest',
      'description' => 'Configure custom Workflow Stamps.',
      'page callback' => 'drupal_get_form',
      'access arguments' => array('administer site configuration'),
      'page arguments' => array('islandora_workflow_rest_admin'),
      'file' => 'includes/admin.form.inc',
      'type' => MENU_NORMAL_ITEM,
    ),
      // Add workflow Step.
    'islandora_workflow_rest/v1/add_workflow' => array(
      'page callback' => 'islandora_workflow_rest_add_workflow_step',
      'page arguments' => array(3),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
    ),
      // Get last workflow item.
    'islandora_workflow_rest/v1/get_last_workflow' => array(
      'page callback' => 'islandora_workflow_rest_get_last_workflow_step',
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
    ),
     // Get full workflow datastream.
    'islandora_workflow_rest/v1/get_full_workflow' => array(
      'page callback' => 'islandora_workflow_rest_get_full_workflow',
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
    ),
     // Test for stamp/category on object WORKFLOW datastream.
    'islandora_workflow_rest/v1/has_entry' => array(
      'page callback' => 'islandora_workflow_rest_test_workflow_step',
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
    ),
      // Find all pids with given stamp/category, within an optional collection.
    'islandora_workflow_rest/v1/workflow_query' => array(
      'page callback' => 'islandora_workflow_rest_find_workflows',
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
    ),
    'islandora_workflow_rest/user/autocomplete' => array(
      'page callback' => 'islandora_workflow_rest_user_autocomplete',
      'access callback' => TRUE,
      'file' => 'includes/workflow.form.inc',
      'type' => MENU_CALLBACK,
    ),
      // Configure default SOLR Fields.
    'islandora_workflow_rest/autocomplete_luke' => array(
      'title' => 'Islandora Solr Luke autocomplete',
      'description' => 'Autocomplete callback to populate solr text fields.',
      'page callback' => 'islandora_workflow_rest_autocomplete_luke',
      'access arguments' => array('administer islandora solr'),
      'file' => 'includes/utilities.inc',
      'type' => MENU_CALLBACK,
    ),
  );
}

/**
 * Implements hook_mail().
 */
function islandora_workflow_rest_mail($key, &$message, $params) {
  global $base_url;

  $data['user'] = $params['mail_account'];
  $options['language'] = $message['language'];
  $variables = array(
    "@username" => format_username($data['user']),
    "@site" => $base_url,
    "@message" => $params['body'],
    "@link" => $base_url . $params['link'],
  );
  user_mail_tokens($variables, $data, $options);
  switch ($key) {
    case 'notice':
      $langcode = $message['language']->language;
      $message['subject'] = t('Notification from @site', $variables, array('langcode' => $langcode));
      $message['body'][] = t("Dear @username\n\n@message\n\n@link\n\n",
        $variables,
        array('langcode' => $langcode)
      );
      break;
  }
  if (module_exists('privatemsg')) {
    // Utilize the Privatemsg module notification system.
    // Send a message to the user with privatemsg_new_thread.
    privatemsg_new_thread(array($data['user']),
      t('Notification from @site', $variables, array('langcode' => $message['language']->language)),
      t("Dear @username\n\n@message\n\n@link\n\n",
        $variables,
        array('langcode' => $langcode)
      )
    );
  }
}

/**
 * Test a workflow for particular attributes.
 */
function islandora_workflow_rest_test_workflow_step() {
  try {
    module_load_include('inc', 'islandora_workflow_rest', 'includes/utilities');
    module_load_include('inc', 'islandora_workflow_rest', 'includes/cwrc_workflow');
    module_load_include('inc', 'islandora_workflow_rest', 'includes/basic_enum');
    module_load_include('inc', 'islandora_workflow_rest', 'includes/workflow_item');

    $params = islandora_workflow_rest_get_request_parameters();
    if (!isset($params['PID'])) {
      return drupal_json_output(array("Error" => "PID was not supplied for this request."));
    }
    $object = islandora_object_load($params['PID']);
    if (!$object['WORKFLOW']) {
      return drupal_json_output("$object->id does not have a workflow datastream.");
    }

    $workflow = CWRCWorkflowAPI::fromDatastream($object['WORKFLOW']);
    $response = array("response" => array());

    // Test if the given object has the given stamp/category/status.
    foreach ($params as $key => $value) {
      if ($key != "PID" && $key != "simple") {
        $response["response"][$key] = $workflow->getWorkflowStepsByAttributeValue($key, $value);
      }
    }
    // Just a simple true or false response.
    if (isset($params['simple']) && strtoupper($params['simple']) == "TRUE") {
      foreach ($response["response"] as $key => $value) {
        $response["response"][$key] = "TRUE";
      }
    }
    return drupal_json_output($response);
  }
  catch (Exception $e) {
    return drupal_json_output($e);
  }
}

/**
 * Return the last workflow step for an islandora object.
 */
function islandora_workflow_rest_get_last_workflow_step() {
  try {
    module_load_include('inc', 'islandora_workflow_rest', 'includes/utilities');
    module_load_include('inc', 'islandora_workflow_rest', 'includes/cwrc_workflow');
    module_load_include('inc', 'islandora_workflow_rest', 'includes/basic_enum');
    module_load_include('inc', 'islandora_workflow_rest', 'includes/workflow_item');

    $params = islandora_workflow_rest_get_request_parameters();
    if (!isset($params['PID'])) {
      return drupal_json_output(array("Error" => "PID was not supplied for this request."));
    }
    $object = islandora_object_load($params['PID']);
    if (!$object['WORKFLOW']) {
      return drupal_json_output("$object->id does not have a workflow datastream.");
    }
    $workflow = CWRCWorkflowAPI::fromDatastream($object['WORKFLOW']);
    return drupal_json_output($workflow->entryToArray());
  }
  catch (Exception $e) {
    return drupal_json_output($e);
  }

}

/**
 * Return the full workflow datastream for an islandora object.
 */
function islandora_workflow_rest_get_full_workflow() {
  try {
    module_load_include('inc', 'islandora_workflow_rest', 'includes/utilities');
    module_load_include('inc', 'islandora_workflow_rest', 'includes/cwrc_workflow');
    module_load_include('inc', 'islandora_workflow_rest', 'includes/basic_enum');
    module_load_include('inc', 'islandora_workflow_rest', 'includes/workflow_item');

    $params = islandora_workflow_rest_get_request_parameters();
    if (!isset($params['PID'])) {
      return drupal_json_output(array("Error" => "PID was not supplied for this request."));
    }
    $object = islandora_object_load($params['PID']);
    if (!$object['WORKFLOW']) {
      return drupal_json_output("$object->id does not have a workflow datastream.");
    }
    $workflow = CWRCWorkflowAPI::fromDatastream($object['WORKFLOW']);
    echo $workflow->workflowToJson();
  }
  catch (Exception $e) {
    return drupal_json_encode($e);
  }
}

/**
 * Rest end-point for workflow entries.
 */
function islandora_workflow_rest_add_workflow_step() {
  try {
    module_load_include('inc', 'islandora_workflow_rest', 'includes/cwrc_workflow');
    module_load_include('inc', 'islandora_workflow_rest', 'includes/basic_enum');
    module_load_include('inc', 'islandora_workflow_rest', 'includes/workflow_item');
    module_load_include('inc', 'islandora_workflow_rest', 'includes/utilities');

    $params = islandora_workflow_rest_get_request_parameters();
    if (!isset($params['PID'])) {
      return drupal_json_output(array("Error" => "PID was not supplied for this request."));
    }

    // Assign parameter values from GET request.
    $activity_params = (isset($params['activity']) ? json_decode($params['activity'], TRUE) : array());
    $tool_id = (isset($params['toolID']) ? array("toolID" => json_decode($params['toolID'])) : array());
    $assigned_params = (isset($params['assigned']) ? json_decode($params['assigned'], TRUE) : array());

    $islandora_object = islandora_object_load($params['PID']);
    if (!$islandora_object['WORKFLOW']) {
      $workflow = CWRCWorkflowAPI::fromTemplate();
      CWRCWorkflowAPI::updateDatastream($workflow, $islandora_object);
    }
    else {
      $workflow = CWRCWorkflowAPI::fromDatastream($islandora_object['WORKFLOW']);
    }

    $activity = new WorkflowItem(WorkflowConst::ACTIVITY,
      $activity_params
    );
    $assigned = new WorkflowItem(WorkflowConst::ASSIGNED,
      $assigned_params
    );
    $entry = new WorkflowItem(WorkflowConst::WORKFLOW,
      $tool_id
    );
    $workflow->addWorkflowStep($islandora_object->id, $entry, $activity, $assigned);
    CWRCWorkflowAPI::updateDatastream($workflow, $islandora_object);
    return drupal_json_output($workflow->entryToArray());
  }
  catch (Exception $e) {
    return drupal_json_output($e);
  }
}

/**
 * Callback to retrieve workflow pids with given attributes.
 */
function islandora_workflow_rest_find_workflows() {
  try {
    module_load_include('inc', 'islandora_workflow_rest', 'includes/utilities');
    module_load_include('inc', 'islandora_workflow_rest', 'includes/cwrc_workflow');
    module_load_include('inc', 'islandora_workflow_rest', 'includes/basic_enum');
    module_load_include('inc', 'islandora_workflow_rest', 'includes/workflow_item');

    $params = islandora_workflow_rest_get_request_parameters();

    $collection_pid = (isset($params['collection_pid']) ? $params['collection_pid'] : NULL);
    $required = (isset($params['required']) ? json_decode($params['collection_pid'], TRUE) : array());
    $custom_query = (isset($params['query']) ? json_decode($params['query']) : NULL);

    $workflow_pids = CWRCWorkflowAPI::findWorkflowPids($custom_query, $collection_pid, $required);
    return drupal_json_output($workflow_pids);
  }
  catch (Exception $e) {
    return drupal_json_output($e);
  }
}
