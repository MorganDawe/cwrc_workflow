<?php
/**
 * @file
 * The main module file for the Islanora workflow rest interface.
 */

// Default constant.
define('ISLANDORA_WORKFLOW_REST_SOLR_DEFAULT_FIELD', 'workflow_userID_ms');

/**
 * Implements hook_menu().
 */
function islandora_workflow_rest_menu() {
  return array(
    // Workflow datastream form entry point tab.
    'islandora/object/%islandora_object/workflow' => array(
      'title' => 'Workflow',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('islandora_workflow_rest_entry_form', 2),
      'type' => MENU_LOCAL_TASK,
      'access arguments' => array(2),
      'access callback' => TRUE,
    ),
    // Administer/add new workflow stamps.
    'admin/islandora/islandora_workflow_rest' => array(
      'title' => 'Workflow Rest',
      'description' => 'Configure custom Workflow Stamps.',
      'page callback' => 'drupal_get_form',
      'access arguments' => array('administer site configuration'),
      'page arguments' => array('islandora_workflow_rest_admin'),
      'file' => 'includes/admin.form.inc',
      'type' => MENU_NORMAL_ITEM,
    ),
      // Add workflow Step.
    'islandora_workflow_rest/v1/add_workflow' => array(
      'page callback' => 'islandora_workflow_rest_add_workflow_step',
      'page arguments' => array(3),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
    ),
      // Get last workflow item.
    'islandora_workflow_rest/v1/get_last_workflow' => array(
      'page callback' => 'islandora_workflow_rest_get_last_workflow_step',
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
    ),
     // Get full workflow datastream.
    'islandora_workflow_rest/v1/get_full_workflow' => array(
      'page callback' => 'islandora_workflow_rest_get_full_workflow',
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
    ),
     // Test for stamp/category on object WORKFLOW datastream.
    'islandora_workflow_rest/v1/has_entry' => array(
      'page callback' => 'islandora_workflow_rest_test_workflow_step',
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
    ),
      // Find all pids with given stamp/category, within an optional collection.
    'islandora_workflow_rest/v1/workflow_query' => array(
      'page callback' => 'islandora_workflow_rest_find_workflows',
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
    ),
      // Configure default SOLR Fields.
    'islandora_workflow_rest/autocomplete_luke' => array(
      'title' => 'Islandora Solr Luke autocomplete',
      'description' => 'Autocomplete callback to populate solr text fields.',
      'page callback' => 'islandora_workflow_rest_autocomplete_luke',
      'access arguments' => array('administer islandora solr'),
      'file' => 'includes/utilities.inc',
      'type' => MENU_CALLBACK,
    ),
  );
}

/**
 * Implements hook_preprocess().
 */
function islandora_workflow_rest_entry_form($form, &$form_state, AbstractObject $object) {
  module_load_include('inc', 'islandora_workflow_rest', 'includes/utilities');
  module_load_include('inc', 'islandora_workflow_rest', 'includes/cwrc_workflow');
  module_load_include('inc', 'islandora_workflow_rest', 'includes/basic_enum');
  module_load_include('inc', 'islandora_workflow_rest', 'includes/workflow_item');

  $workflow = NULL;
  if (!$object['WORKFLOW']) {
    $workflow = CWRCWorkflowAPI::fromTemplate($object['WORKFLOW']);
    CWRCWorkflowAPI::updateDatastream($workflow, $object);
  }
  else {
    $workflow = CWRCWorkflowAPI::fromDatastream($object['WORKFLOW']);
  }
  $json = $workflow->workflowToJson();
  $all_workflows = drupal_json_decode($json, TRUE);
  $form['islandora_object'] = array('#type' => 'hidden', '#value' => $object->id);

  $form['workflow_wfs_fs'] = array(
    '#type' => 'fieldset',
    '#title' => t('View Workflows'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['workflow_wfs_add_fs'] = array(
    '#type' => 'fieldset',
    '#title' => t('Add Workflow'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $options = array();
  if (isset($all_workflows['cwrc']['workflow']) && $all_workflows['cwrc']['workflow'] != "") {
    foreach ($all_workflows['cwrc']['workflow'] as $key => $value) {
      $options[$key] = array(
        'workflowID' => $value['attributes']['workflowID'],
        'userID' => $value['attributes']['userID'],
        'category' => (isset($value['activity']['attributes']['category']) ? $value['activity']['attributes']['category'] : ""),
      );
    }
  }

  $header = array(
    'workflowID' => t('Workflow ID'),
    'userID' => t('User ID'),
    'category' => t('Category'),
  );
  $form['workflow_wfs_fs']['table'] = array(
    '#theme' => 'table',
    '#type' => 'tableselect',
    '#header' => $header,
    '#rows' => $options,
    '#attributes' => array(),
    '#empty' => t("There are no workflows."),
  );

  $form = islandora_workflow_rest_build_add_workflow($form);

  return $form;
}

/**
 * Add the workflow entry form to the given form.
 *
 * @param array $form
 *   The drupal form array to append the form to.
 *
 * @return array
 *   The returned form.
 */
function islandora_workflow_rest_build_add_workflow($form) {
  module_load_include('inc', 'islandora_workflow_rest', 'includes/basic_enum');
  module_load_include('inc', 'islandora_workflow_rest', 'includes/utilities');

  $assigned_categorys = AssignedCategory::getAllConstants();

  $stamps = array();
  $results = islandora_workflow_rest_get_all_stamps();
  while ($data = $results->fetchObject()) {
    $stamps[$data->stamp] = $data->stamp;
  }
  $form['workflow_wfs_add_fs']['user'] = array(
    '#type' => 'textfield',
    '#title' => t('Assign to'),
    '#default_value' => "",
    '#size' => 60,
    '#maxlength' => 128,
    '#required' => TRUE,
  );

  $form['workflow_wfs_add_fs']['assign_category'] = array(
    '#type' => 'select',
    '#title' => t('Assignment Category'),
    '#options' => $assigned_categorys,
    '#default_value' => 'sample_category',
  );
  $form['workflow_wfs_add_fs']['assign_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Subject'),
    '#default_value' => "",
    '#size' => 60,
    '#maxlength' => 128,
  );
  $form['workflow_wfs_add_fs']['wf_ass_note'] = array(
    '#title' => t('Note'),
    '#type' => 'textarea',
  );
  $form['workflow_wfs_add_fs']['workflow_fs_activity'] = array(
    '#type' => 'fieldset',
    '#title' => t('Activity'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['workflow_wfs_add_fs']['workflow_fs_activity']['wf_ass_note'] = array(
    '#title' => t('Activity Note'),
    '#type' => 'textarea',
  );
  $form['workflow_wfs_add_fs']['workflow_fs_activity']['wf_ass_act_category'] = array(
    '#type' => 'select',
    '#title' => t('Activity Category'),
    '#options' => $assigned_categorys,
  );
  $form['workflow_wfs_add_fs']['workflow_fs_activity']['wf_ass_stamp'] = array(
    '#type' => 'select',
    '#title' => t('Stamp'),
    '#options' => $stamps,
  );
  $form['workflow_wfs_add_fs']['workflow_fs_activity']['wf_ass_status'] = array(
    '#type' => 'select',
    '#title' => t('Status'),
    '#options' => array(
      'Complete' => t('Complete'),
      'In Progress' => t('In Progress'),
      'Pending' => t('Pending'),
      'Incomplete' => t('Incomplete'),
    ),
    '#default_value' => 'sample_category',
  );
  $form['workflow_wfs_add_fs']['workflow_fs_activity']['wf_ass_tool'] = array(
    '#type' => 'textfield',
    '#title' => t('Tool'),
    '#default_value' => "",
    '#size' => 60,
    '#maxlength' => 128,
    '#required' => FALSE,
  );
  $form['workflow_wfs_add_fs']['submit'][] = array(
    '#type' => 'submit',
    '#value' => t('Add'),
  );
  return $form;
}

/**
 * Implements hook_form_submit().
 */
function islandora_workflow_rest_entry_form_submit($form, &$form_state) {
  // TODO: Need form validation.
  $assigned_params = array();
  $assigned_params['recipient'] = $form_state['values']['user'];
  $assigned_params['category'] = $form_state['values']['assign_category'];
  $assigned_params['body'] = $form_state['values']['wf_ass_note'];
  $assigned_params['subject'] = $form_state['values']['assign_subject'];

  $activity_params = array();
  $activity_params['note'] = $form_state['values']['wf_ass_note'];
  $activity_params['category'] = $form_state['values']['wf_ass_act_category'];
  $activity_params['stamp'] = $form_state['values']['wf_ass_stamp'];
  $activity_params['status'] = $form_state['values']['wf_ass_status'];

  $activity_tool = $form_state['values']['wf_ass_tool'];

  $islandora_object = islandora_object_load($form_state['values']['islandora_object']);
  if (!$islandora_object['WORKFLOW']) {
    $workflow = CWRCWorkflowAPI::fromTemplate();
    CWRCWorkflowAPI::updateDatastream($workflow, $islandora_object);
  }
  else {
    $workflow = CWRCWorkflowAPI::fromDatastream($islandora_object['WORKFLOW']);
  }

  $activity = new WorkflowItem(WorkflowConst::ACTIVITY,
    $activity_params
  );
  $assigned = new WorkflowItem(WorkflowConst::ASSIGNED,
    $assigned_params
  );
  $entry = new WorkflowItem(WorkflowConst::WORKFLOW,
    array('toolID' => $activity_tool)
  );

  $workflow->addWorkflowStep($islandora_object->id, $entry, $activity, $assigned);
  CWRCWorkflowAPI::updateDatastream($workflow, $islandora_object);
}
/**
 * Test a workflow for particular attributes.
 */
function islandora_workflow_rest_test_workflow_step() {
  try {
    module_load_include('inc', 'islandora_workflow_rest', 'includes/utilities');
    module_load_include('inc', 'islandora_workflow_rest', 'includes/cwrc_workflow');
    module_load_include('inc', 'islandora_workflow_rest', 'includes/basic_enum');
    module_load_include('inc', 'islandora_workflow_rest', 'includes/workflow_item');

    $params = islandora_workflow_rest_get_request_parameters();
    $object = islandora_object_load($params['PID']);
    if (!$object['WORKFLOW']) {
      return drupal_json_output("$object->id does not have a workflow datastream.");
    }

    $workflow = CWRCWorkflowAPI::fromDatastream($object['WORKFLOW']);
    $response = array("response" => array());

    // Test if the given object has the given stamp/category/status.
    foreach ($params as $key => $value) {
      if ($key != "PID" && $key != "simple") {
        $response["response"][$key] = $workflow->getWorkflowStepsByAttributeValue($key, $value);
      }
    }
    // Just a simple true or false response.
    if (isset($params['simple']) && strtoupper($params['simple']) == "TRUE") {
      foreach ($response["response"] as $key => $value) {
        $response["response"][$key] = "TRUE";
      }
    }
    return drupal_json_encode($response);
  }
  catch (Exception $e) {
    return drupal_json_encode($e);
  }
}

/**
 * Return the last workflow step for an islandora object.
 */
function islandora_workflow_rest_get_last_workflow_step() {
  try {
    module_load_include('inc', 'islandora_workflow_rest', 'includes/utilities');
    module_load_include('inc', 'islandora_workflow_rest', 'includes/cwrc_workflow');
    module_load_include('inc', 'islandora_workflow_rest', 'includes/basic_enum');
    module_load_include('inc', 'islandora_workflow_rest', 'includes/workflow_item');

    $params = islandora_workflow_rest_get_request_parameters();
    if (!isset($params['PID'])) {
      return drupal_json_output(array("Error" => "PID was not supplied for this request."));
    }
    $object = islandora_object_load($params['PID']);
    if (!$object['WORKFLOW']) {
      return drupal_json_output("$object->id does not have a workflow datastream.");
    }
    $workflow = CWRCWorkflowAPI::fromDatastream($object['WORKFLOW']);
    return drupal_json_encode($workflow->entryToArray());
  }
  catch (Exception $e) {
    return drupal_json_encode($e);
  }

}

/**
 * Return the full workflow datastream for an islandora object.
 */
function islandora_workflow_rest_get_full_workflow() {
  try {
    module_load_include('inc', 'islandora_workflow_rest', 'includes/utilities');
    module_load_include('inc', 'islandora_workflow_rest', 'includes/cwrc_workflow');
    module_load_include('inc', 'islandora_workflow_rest', 'includes/basic_enum');
    module_load_include('inc', 'islandora_workflow_rest', 'includes/workflow_item');

    $params = islandora_workflow_rest_get_request_parameters();
    $object = islandora_object_load($params['PID']);
    if (!$object['WORKFLOW']) {
      return drupal_json_output("$object->id does not have a workflow datastream.");
    }
    $workflow = CWRCWorkflowAPI::fromDatastream($object['WORKFLOW']);
    return $workflow->workflowToJson();
  }
  catch (Exception $e) {
    return drupal_json_encode($e);
  }
}

/**
 * Rest end-point for workflow entries.
 */
function islandora_workflow_rest_add_workflow_step() {
  try {
    module_load_include('inc', 'islandora_workflow_rest', 'includes/cwrc_workflow');
    module_load_include('inc', 'islandora_workflow_rest', 'includes/basic_enum');
    module_load_include('inc', 'islandora_workflow_rest', 'includes/workflow_item');
    module_load_include('inc', 'islandora_workflow_rest', 'includes/utilities');

    $params = islandora_workflow_rest_get_request_parameters();

    // Assign parameter values from GET request.
    $activity_params = (isset($params['activity']) ? json_decode($params['activity'], TRUE) : array());
    $tool_id = (isset($params['toolID']) ? array("toolID" => json_decode($params['toolID'])) : array());
    $assigned_params = (isset($params['assigned']) ? json_decode($params['assigned'], TRUE) : array());

    $islandora_object = islandora_object_load($params['PID']);
    if (!$islandora_object['WORKFLOW']) {
      $workflow = CWRCWorkflowAPI::fromTemplate();
      CWRCWorkflowAPI::updateDatastream($workflow, $islandora_object);
    }
    else {
      $workflow = CWRCWorkflowAPI::fromDatastream($islandora_object['WORKFLOW']);
    }

    $activity = new WorkflowItem(WorkflowConst::ACTIVITY,
      $activity_params
    );
    $assigned = new WorkflowItem(WorkflowConst::ASSIGNED,
      $assigned_params
    );
    $entry = new WorkflowItem(WorkflowConst::WORKFLOW,
      $tool_id
    );
    $workflow->addWorkflowStep($islandora_object->id, $entry, $activity, $assigned);
    CWRCWorkflowAPI::updateDatastream($workflow, $islandora_object);
    return drupal_json_encode($workflow->entryToArray());
  }
  catch (Exception $e) {
    return drupal_json_encode($e);
  }
}

/**
 * Callback to retrieve workflow pids with given attributes.
 */
function islandora_workflow_rest_find_workflows() {
  try {
    module_load_include('inc', 'islandora_workflow_rest', 'includes/utilities');
    module_load_include('inc', 'islandora_workflow_rest', 'includes/cwrc_workflow');
    module_load_include('inc', 'islandora_workflow_rest', 'includes/basic_enum');
    module_load_include('inc', 'islandora_workflow_rest', 'includes/workflow_item');

    $params = islandora_workflow_rest_get_request_parameters();

    $collection_pid = (isset($params['collection_pid']) ? $params['collection_pid'] : NULL);
    $required = (isset($params['required']) ? json_decode($params['collection_pid'], TRUE) : array());
    $custom_query = (isset($params['query']) ? json_decode($params['query']) : NULL);

    $workflow_pids = CWRCWorkflowAPI::findWorkflowPids($custom_query, $collection_pid, $required);
    return drupal_json_encode($workflow_pids);
  }
  catch (Exception $e) {
    return drupal_json_encode($e);
  }
}
